name: Migration Tests (kmpfit -> lmfit)

on:
  push:
    branches: [ main, dev, migration/* ]
  pull_request:
    branches: [ main, dev ]
  schedule:
    # Run weekly to catch dependency issues
    - cron: '0 2 * * 1'

jobs:
  test-kmpfit-baseline:
    name: Test kmpfit baseline
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gfortran
    
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install cython for kapteyn
      run: |
        pip install cython
    
    - name: Install kapteyn
      run: |
        pip install https://www.astro.rug.nl/software/kapteyn/kapteyn-3.4.tar.gz
    
    - name: Install dependencies
      run: |
        pip install -e .[dev]
        pip install pytest-cov pytest-benchmark
    
    - name: Configure for kmpfit only
      run: |
        echo "QSOFITMORE_USE_LMFIT=false" >> $GITHUB_ENV
        echo "QSOFITMORE_VALIDATE_KMPFIT=false" >> $GITHUB_ENV
    
    - name: Download dust maps
      run: |
        python -c "
        from dustmaps.config import config
        import dustmaps.sfd
        config['data_dir'] = './dustmaps_data'
        dustmaps.sfd.fetch()
        "
    
    - name: Run kmpfit baseline tests
      run: |
        pytest tests/ -v --cov=qsofitmore --cov-report=xml -m "not benchmark"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: kmpfit-baseline
        name: kmpfit-${{ matrix.python-version }}

  test-lmfit-migration:
    name: Test lmfit migration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        migration-stage: ["continuum", "lines", "complete"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gfortran
    
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies (both kmpfit and lmfit)
      run: |
        pip install cython
        pip install https://www.astro.rug.nl/software/kapteyn/kapteyn-3.4.tar.gz
        pip install -e .[dev]
        pip install pytest-cov pytest-benchmark
    
    - name: Configure migration stage
      run: |
        if [ "${{ matrix.migration-stage }}" = "continuum" ]; then
          echo "QSOFITMORE_USE_LMFIT_CONTINUUM=true" >> $GITHUB_ENV
          echo "QSOFITMORE_USE_LMFIT_LINES=false" >> $GITHUB_ENV
          echo "QSOFITMORE_USE_LMFIT_MC=false" >> $GITHUB_ENV
        elif [ "${{ matrix.migration-stage }}" = "lines" ]; then
          echo "QSOFITMORE_USE_LMFIT_CONTINUUM=true" >> $GITHUB_ENV
          echo "QSOFITMORE_USE_LMFIT_LINES=true" >> $GITHUB_ENV
          echo "QSOFITMORE_USE_LMFIT_MC=false" >> $GITHUB_ENV
        elif [ "${{ matrix.migration-stage }}" = "complete" ]; then
          echo "QSOFITMORE_USE_LMFIT=true" >> $GITHUB_ENV
          echo "QSOFITMORE_USE_LMFIT_CONTINUUM=true" >> $GITHUB_ENV
          echo "QSOFITMORE_USE_LMFIT_LINES=true" >> $GITHUB_ENV
          echo "QSOFITMORE_USE_LMFIT_MC=true" >> $GITHUB_ENV
        fi
        echo "QSOFITMORE_VALIDATE_KMPFIT=true" >> $GITHUB_ENV
        echo "QSOFITMORE_RTOL=1e-6" >> $GITHUB_ENV
        echo "QSOFITMORE_ATOL=1e-8" >> $GITHUB_ENV
    
    - name: Download dust maps
      run: |
        python -c "
        from dustmaps.config import config
        import dustmaps.sfd
        config['data_dir'] = './dustmaps_data'
        dustmaps.sfd.fetch()
        "
    
    - name: Run migration tests
      run: |
        pytest tests/ -v --cov=qsofitmore --cov-report=xml -m "not benchmark"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: lmfit-migration
        name: lmfit-${{ matrix.migration-stage }}-${{ matrix.python-version }}

  benchmark-performance:
    name: Benchmark performance
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need history for comparison
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gfortran
    
    - name: Install dependencies
      run: |
        pip install cython
        pip install https://www.astro.rug.nl/software/kapteyn/kapteyn-3.4.tar.gz
        pip install -e .[dev]
        pip install pytest-benchmark
    
    - name: Download dust maps
      run: |
        python -c "
        from dustmaps.config import config
        import dustmaps.sfd
        config['data_dir'] = './dustmaps_data'
        dustmaps.sfd.fetch()
        "
    
    - name: Run kmpfit benchmarks
      run: |
        export QSOFITMORE_USE_LMFIT=false
        export QSOFITMORE_BENCHMARK=true
        pytest tests/ -v --benchmark-only --benchmark-json=kmpfit_benchmark.json
    
    - name: Run lmfit benchmarks
      run: |
        export QSOFITMORE_USE_LMFIT=true
        export QSOFITMORE_BENCHMARK=true
        pytest tests/ -v --benchmark-only --benchmark-json=lmfit_benchmark.json
    
    - name: Compare benchmarks
      run: |
        python -c "
        import json
        with open('kmpfit_benchmark.json') as f:
            kmpfit = json.load(f)
        with open('lmfit_benchmark.json') as f:
            lmfit = json.load(f)
        
        print('Performance comparison:')
        for ktest in kmpfit.get('benchmarks', []):
            name = ktest['name']
            ktime = ktest['stats']['mean']
            
            # Find corresponding lmfit test
            ltime = None
            for ltest in lmfit.get('benchmarks', []):
                if ltest['name'] == name:
                    ltime = ltest['stats']['mean']
                    break
            
            if ltime:
                ratio = ltime / ktime
                status = 'FASTER' if ratio < 1 else 'SLOWER'
                print(f'{name}: kmpfit={ktime:.4f}s, lmfit={ltime:.4f}s, ratio={ratio:.2f}x {status}')
        "

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: [test-kmpfit-baseline, test-lmfit-migration]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gfortran
    
    - name: Install dependencies
      run: |
        pip install cython
        pip install https://www.astro.rug.nl/software/kapteyn/kapteyn-3.4.tar.gz
        pip install -e .[dev]
    
    - name: Download dust maps
      run: |
        python -c "
        from dustmaps.config import config
        import dustmaps.sfd
        config['data_dir'] = './dustmaps_data'
        dustmaps.sfd.fetch()
        "
    
    - name: Run integration tests
      run: |
        export QSOFITMORE_USE_LMFIT=true
        export QSOFITMORE_VALIDATE_KMPFIT=true
        pytest tests/test_migration_integration.py -v

  documentation-check:
    name: Check documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check migration plan exists
      run: |
        test -f MIGRATION_PLAN_KMPFIT_TO_LMFIT.md
    
    - name: Check CLAUDE.md updated
      run: |
        grep -q "lmfit" CLAUDE.md || echo "Warning: CLAUDE.md may need updating for lmfit"
    
    - name: Validate markdown
      uses: DavidAnson/markdownlint-action@v1
      with:
        files: '*.md'
        config: |
          {
            "MD013": false,
            "MD033": false
          }