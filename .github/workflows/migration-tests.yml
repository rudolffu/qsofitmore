name: Migration Tests (kmpfit -> lmfit)

on:
  push:
    branches: [ main, dev, migration/* ]
  pull_request:
    branches: [ main, dev ]
  schedule:
    # Run weekly to catch dependency issues
    - cron: '0 2 * * 1'

jobs:
  test-infrastructure:
    name: Test migration infrastructure
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies (without kapteyn)
      run: |
        pip install pytest pytest-cov pytest-benchmark
        pip install numpy scipy matplotlib astropy pandas uncertainties lmfit
    
    - name: Install package in development mode
      run: |
        pip install -e . --no-deps
    
    - name: Configure for infrastructure testing
      run: |
        echo "QSOFITMORE_USE_LMFIT=false" >> $GITHUB_ENV
        echo "QSOFITMORE_VALIDATE_KMPFIT=false" >> $GITHUB_ENV
    
    - name: Run infrastructure tests (no kapteyn required)
      run: |
        pytest tests/test_utilities.py tests/test_migration_integration.py::TestMigrationIntegration::test_feature_flags -v --cov=qsofitmore --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: infrastructure
        name: infrastructure-${{ matrix.python-version }}

  test-lmfit-only:
    name: Test lmfit functionality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies (lmfit only)
      run: |
        pip install pytest pytest-cov pytest-benchmark
        pip install numpy scipy matplotlib astropy pandas uncertainties lmfit
    
    - name: Install package in development mode  
      run: |
        pip install -e . --no-deps
    
    - name: Configure for lmfit testing
      run: |
        echo "QSOFITMORE_USE_LMFIT=true" >> $GITHUB_ENV
        echo "QSOFITMORE_VALIDATE_KMPFIT=false" >> $GITHUB_ENV
        echo "QSOFITMORE_RTOL=1e-6" >> $GITHUB_ENV
        echo "QSOFITMORE_ATOL=1e-8" >> $GITHUB_ENV
    
    - name: Run lmfit tests (infrastructure only)
      run: |
        pytest tests/test_utilities.py tests/test_migration_integration.py::TestMigrationIntegration -v --cov=qsofitmore --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: lmfit-only
        name: lmfit-only-${{ matrix.python-version }}

  benchmark-lmfit:
    name: Benchmark lmfit performance
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need history for comparison
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Install dependencies
      run: |
        pip install pytest pytest-benchmark
        pip install numpy scipy matplotlib astropy pandas uncertainties lmfit
        pip install -e . --no-deps
    
    - name: Run lmfit benchmarks
      run: |
        export QSOFITMORE_USE_LMFIT=true
        export QSOFITMORE_BENCHMARK=true
        pytest tests/test_utilities.py -m benchmark --benchmark-json=lmfit_benchmark.json
    
    - name: Display benchmark results
      run: |
        python -c "
        import json
        with open('lmfit_benchmark.json') as f:
            data = json.load(f)
        print('Benchmark results:')
        for test in data.get('benchmarks', []):
            name = test['name']
            time = test['stats']['mean']
            print(f'{name}: {time:.4f}s')
        "

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: [test-infrastructure, test-lmfit-only]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Install dependencies
      run: |
        pip install pytest
        pip install numpy scipy matplotlib astropy pandas uncertainties lmfit
        pip install -e . --no-deps
    
    - name: Run integration tests
      run: |
        export QSOFITMORE_USE_LMFIT=true
        export QSOFITMORE_VALIDATE_KMPFIT=false
        pytest tests/test_migration_integration.py::TestMigrationIntegration::test_feature_flags -v

  documentation-check:
    name: Check documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check migration plan exists
      run: |
        test -f MIGRATION_PLAN_KMPFIT_TO_LMFIT.md
    
    - name: Check CLAUDE.md updated
      run: |
        if [ -f "CLAUDE.md" ]; then
          grep -q "lmfit" CLAUDE.md || echo "Warning: CLAUDE.md may need updating for lmfit"
        else
          echo "CLAUDE.md not found - this is expected for migration preparation"
        fi
    
    - name: Validate markdown
      uses: articulate/actions-markdownlint@v1
      with:
        files: '*.md'
        config: |
          {
            "MD013": false,
            "MD033": false
          }